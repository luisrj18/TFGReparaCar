package com.reparacar.serviceImpl;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.reparacar.ResourceNotFoundException;
import com.reparacar.dto.ClienteDTO;
import com.reparacar.dto.LoginDTO;
import com.reparacar.entity.Cliente;
import com.reparacar.repository.ClienteRepository;
import com.reparacar.repository.TallerRepository;
import com.reparacar.service.ClienteService;

@Service
public class ClienteServiceImpl implements ClienteService {

    private final ClienteRepository clienteRepository;
    private final TallerRepository tallerRepository;

    @Autowired
    public ClienteServiceImpl(ClienteRepository clienteRepository,TallerRepository tallerRepository) {
        this.clienteRepository = clienteRepository;
		this.tallerRepository = null;
    }

    @Override
    public ClienteDTO crearCliente(ClienteDTO clienteDTO) {
        Cliente cliente = mapearAEntidad(clienteDTO);
        Cliente clienteGuardado = clienteRepository.save(cliente);
        return mapearADTO(clienteGuardado);
    }

    @Override
    public List<ClienteDTO> obtenerTodosClientes() {
        List<Cliente> clientes = clienteRepository.findAll();
        return clientes.stream()
                .map(this::mapearADTO)
                .collect(Collectors.toList());
    }

    @Override
    public ClienteDTO obtenerClientePorId(Long id) {
        Cliente cliente = clienteRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Cliente no encontrado con ID: " + id));
        return mapearADTO(cliente);
    }

    @Override
    public ClienteDTO actualizarCliente(Long id, ClienteDTO clienteDTO) {
        // Verificar si existe el cliente
        Cliente cliente = clienteRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Cliente no encontrado con ID: " + id));
        
        // Actualizar los campos
        cliente.setNombre(clienteDTO.getNombre());
        cliente.setApellidos(clienteDTO.getApellidos());
        cliente.setEmail(clienteDTO.getEmail());
        cliente.setTelefono(clienteDTO.getTelefono());
        cliente.setDireccion(clienteDTO.getDireccion());
        cliente.setCodigoPostal(clienteDTO.getCodigoPostal());
        cliente.setCiudad(clienteDTO.getCiudad());
        
        Cliente clienteActualizado = clienteRepository.save(cliente);
        return mapearADTO(clienteActualizado);
    }

    @Override
    public void eliminarCliente(Long id) {
        // Verificar si existe el cliente
        Cliente cliente = clienteRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Cliente no encontrado con ID: " + id));
        
        clienteRepository.delete(cliente);
    }

    @Override
    public List<ClienteDTO> buscarClientes(String nombre, String apellidos) {
        List<Cliente> clientes;
        
        if (nombre != null && apellidos != null) {
            clientes = clienteRepository.findByNombreContainingAndApellidosContaining(nombre, apellidos);
        } else if (nombre != null) {
            clientes = clienteRepository.findByNombreContaining(nombre);
        } else if (apellidos != null) {
            clientes = clienteRepository.findByApellidosContaining(apellidos);
        } else {
            clientes = clienteRepository.findAll();
        }
        
        return clientes.stream()
                .map(this::mapearADTO)
                .collect(Collectors.toList());
    }
    
    // Método auxiliar para mapear de entidad a DTO
    private ClienteDTO mapearADTO(Cliente cliente) {
        ClienteDTO clienteDTO = new ClienteDTO();
        clienteDTO.setId(cliente.getId());
        clienteDTO.setNombre(cliente.getNombre());
        clienteDTO.setApellidos(cliente.getApellidos());
        clienteDTO.setEmail(cliente.getEmail());
        clienteDTO.setTelefono(cliente.getTelefono());
        clienteDTO.setDireccion(cliente.getDireccion());
        clienteDTO.setCodigoPostal(cliente.getCodigoPostal());
        clienteDTO.setCiudad(cliente.getCiudad());
        clienteDTO.setProvincia(cliente.getProvincia());
        clienteDTO.setPassword(cliente.getPassword());
        return clienteDTO;
    }
    
    // Método auxiliar para mapear de DTO a entidad
    private Cliente mapearAEntidad(ClienteDTO clienteDTO) {
        Cliente cliente = new Cliente();
        // No establecemos el ID para crear un nuevo cliente
        // Para actualizaciones, el ID se gestiona en el método actualizarCliente
        cliente.setNombre(clienteDTO.getNombre());
        cliente.setApellidos(clienteDTO.getApellidos());
        cliente.setEmail(clienteDTO.getEmail());
        cliente.setTelefono(clienteDTO.getTelefono());
        cliente.setDireccion(clienteDTO.getDireccion());
        cliente.setCodigoPostal(clienteDTO.getCodigoPostal());
        cliente.setCiudad(clienteDTO.getCiudad());
        cliente.setPassword(clienteDTO.getPassword());
        cliente.setProvincia(clienteDTO.getProvincia());
        return cliente;
    }

	@Override
	public ClienteDTO login(LoginDTO login) {
		
		Optional<Cliente> user = clienteRepository.findByEmailAndPassword(login.getEmail(), login.getPassword());
		if(user.isPresent()) {
			return mapearADTO(user);	
		}else {
			tallerRepository.
		}
		
		
	}
}